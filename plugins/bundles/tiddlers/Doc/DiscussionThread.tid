title: $:/plugins/howwownow/bundles/Doc/UseCaseGeorge
description: The discussion we had around this subject

# Discussion Thread

See also https://groups.google.com/d/msg/tiddlywiki/HrL5owEOJKM/ywe5EU9WAQAJ

See also [george.md](george.md).

---

Tobias Beer 2015-11-06

Hi George, err Christopher :D


> George wants subwikis to be up-to-date in order to plan his activities transversally.

Does "transversally" mean independently, simultaneously?

> GeorgeGeek will consult the sub-wiki tiddler updated from the meta-wiki file

What exactly does George do here?
What does "updated from" mean?

> Create an WikiAsPlugin plugin.


Perhaps useTinka?
I still haven't gotten to play more concretely with the idea of swarms, i.e. more "losely defined bundles of tiddlers", plugin-like packaged.

Exporting a wiki as a plugin will effectively allow the subwiki to be loaded into the meta wiki without having to restart either a node-js instance nor need to duplicate tiddlers in a current wiki file.


Ideally, node will at some point not need restarting the server.

> WikiAsPlugin would mainly have an export function. The exported plugin would then replace the currently installed plugin with fresher content.


Via drag+drop update?

> viewing changes to shadow tiddlers

core feature => look at plugin => observe which plugin tiddlers are overwritten

> exporting changes from shadow tiddlers on meta-wiki

perhaps the right predefined-filter under "advanced search" will do to get "all from plugin X" that are "not shadows"?

> importing changes from meta-wiki into sub-wiki

Mhhh, why not edit the subwiki?

After all George, wants it packed and redistributed back to his meta wiki, not having to figure out what overwritten shadows to eventually delete in the Meta Wiki and when, etc.

> George, being a geek, would GIT-version the wiki-as-a-plugin and sychronize it with a node-js instance, etc.


So he does use node, after all. Then I would perhaps recommend not to endeavour this in-browser approach at all... but I can see how editing on a tablet asks for a way to get those updates from in-there synced back out-there, i.e. into node,

The layman's approach could be: do edits and save them somewhere else, e.g. a backlog in, say, Trello. From there, merge them into those "master wikis" manually.

Best wishes,

Tobias.

---

Tobias Beer 2015-11-07

Hi Christopher,

> As Tinka stands, checking each checkbox is a too troublesome.

I very much agree, without some check-all option, setting it up ain't fun at all.

>Here is a WikiAsPlugin approach:

>George sets up his personal library of plugins
A button allows the publication of the current library to that plugin library

>Any wiki can include another wiki as a plugin through that library

>The drawback would be in same-named toddlers being deleted with the deleting or even disabling of the plugin.

I like the approach. Including wikis or just collections of tiddlers in other wikis has always been a very powerful thing. Without it, we'd have no plugins, for one. Currently, we are limited in leveraging this by a sophisticated plugin-mechanism that defies a simple "reuse tidbits" approach and forces a "publish a versioned bundle of codebits and supporting tids for distribution".

When I was referring to "swarms", I meant precisely what you've had in mind. A few tiddlers forming a "swarm" that can move and reinstate in another context as simply as possible. No fuzz, no plugin, designed for content to bundle up and come to life elsewhere.

Right now, what you've got for that is export/import.

Best wishes,

— tb

---

Jeremy Ruston 2015-11-07

> On 7 Nov 2015, at 08:36, Tobias Beer <beert...@gmail.com> wrote:

> Currently, we are limited in leveraging this by a sophisticated plugin-mechanism that defies a simple "reuse tidbits" approach and forces a "publish a versioned bundle of codebits and supporting tids for distribution".

I’d like to understand the issues you see with the current plugin mechanism. Are you envisaging a specific alternative?

There are currently two ways to “reuse tidbits”: a JSON file or a plugin. The JSON file is just about the simplest thing it could be: a nice simple plain text rendering of the source of a group of tiddlers, and is easy to work with in other tools. The plugin mechanism introduces just enough “sophistication” to satisfy their purpose: to be an *updatable* reusable tidbit.

Is it just that the support for building plugins in the browser is primitive?

Best wishes

Jeremy

---

Tobias Beer 2015-11-07

Hi Jeremy,

>> Currently, we are limited in leveraging this by a sophisticated plugin-mechanism that defies a simple "reuse tidbits" approach and forces a "publish a versioned bundle of codebits and supporting tids for distribution".

> I’d like to understand the issues you see with the current plugin mechanism. Are you envisaging a specific alternative?

Thanks for asking. Not sure about the specifics, the tenets of improvements might be:

1. easy bundling of tiddlers
   * come to think of it, including plugins
2. for reuse in a bundled manner
   * meaning: as shadows (compare: inclusion on TiddlySpace)

The plugin mechanism does cater for (some of?) that scenario, only the means to use it for this purpose are possibly limited to selected individuals who know the how to's. To me, the goal would be indeed to simplify this "packaging" process and thus allow reusing tiddler packages in different context, as if plugins (or then actual plugins), and possibly even containing not only content but also structure, even functionality... in short: whatever ...could be my master template packaging all kinds of things, reused throughout my wikis. Could be a "my docs package". Could be a "my todo setup" containing the basic scaffolding for my to do list workflow... however, on a much more "simply create and use a basic package" level rather than a "figure out how to package and manage plugins" level, with versioning, naming conventions or whatever may be recommended for tried and true plugins, rather than "simple bundles".

> There are currently two ways to “reuse tidbits”: a JSON file or a plugin. The JSON file is just about the simplest thing it could be: a nice simple plain text rendering of the source of a group of tiddlers, and is easy to work with in other tools. The plugin mechanism introduces just enough “sophistication” to satisfy their purpose: to be an *updatable* reusable tidbit.

So, yes, the way how plugins work once they exist is great. Just the way to create one is not as simple as it could be to allow for a more user centric packaging of whatever tidbits into bundles. In fact, I'd even shy away from using the name "plugin", as it comes with the connotation of being a developed thing, coded of sorts. Psychologically alone, simply packing up tiddlers into reusable bundles (being shadows in a target wiki) would sound much simpler than being the author of a plugin and all the presumed responsibility one might assume comes with such a position. It would make packaging a common task and process rather than a by default advanced, elevated one.

> Is it just that the support for building plugins in the browser is primitive?

I guess so. By default, such a packer would create the most simplistic package conceivable, in terms of setup and required data. (Right now I don't even know the full requirements for plugins, tbh. (without researching) ...and then perhaps an "advanced options" panel that can be toggled so as to specify any other (plugin) parameters that may be needed / used / specified, perhaps with a help / info bubble that explains what a given metadata-field is for.

Pragmatically speaking: possibly a streamlined Tinka that...

* makes tiddler selection as easy as possible
  * currently, selecting tiddlers is by individually ticking off checkboxes next to titles matching a manually entered filter
* only asks to specify the most basic details required for packaging, leaving out everything that truly is not
  * in fact, could be just a title and nothing but
  * avails the complete / advanced options in an expandable section

Best wishes,

— tb

---

from: Jeremy R  

On: 2015-11-09

Hi Christopher

Good stuff.

You may have seen it already, but there is a core function you can call in the browser to create a plugin:

http://tiddlywiki.com/dev/#How%20to%20create%20plugins%20in%20the%20browser

https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/pluginmaker.js

The reason that the core doesn’t have an “export as plugin” option is because there’s currently no mechanism for the user to specify the other parameters needed to create the plugin: the title of the plugin tiddler, and the version number. What are you currently using as the fields of the plugin tiddler? The upgrade mechanism relies on the version number being bumped on each revision.

In terms of dynamically updating installed plugins, there is of course already a mechanism to do that via the plugin library. The internals are a bit counter-intuitive because of the same origin limitations that browser’s impose; it’s not an option to just xmlhttprequest() to retrieve the new text of a plugin.

The plugin library is represented as an HTML file that TW loads in an iframe, and then communicates with using window.postMessage(). The HTML file is allowed to use xmlhttprequest() to retrieve plugins from the same domain from which it was loaded.

The easiest way to explore might be to first look at the plugin library HTML file:

http://tiddlywiki.com/library/v5.1.9/index.html

You can see the raw files here:

https://github.com/Jermolene/jermolene.github.io/blob/master/library/v5.1.9/index.html

The plugin library is built from this special edition:

https://github.com/Jermolene/TiddlyWiki5/blob/master/editions/pluginlibrary

Most of the logic is in this plugin:

https://github.com/Jermolene/TiddlyWiki5/tree/master/plugins/tiddlywiki/pluginlibrary

The TW code that interacts with the plugin library is here:

https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/startup/browser-messaging.js

PlugOut would be a repository, even on a local filesystem, that would act as a library for Plugins.

The obstacle here is that Chrome doesn’t let files loaded on a file:// URI perform any xmlhttprequest() to other file:// URIs.

My warning would be that the entire approach to implementing the plugin library was shaped by the browser security restrictions. I’d recommend careful testing before you rely on a browser capability actually working in the right scenarios.

Good luck,

Best wishes

Jeremy.

---

Part of my answer 2015-11-09

I am being really lazy here perhaps, but how do I construct recipes/library/tiddlers.json and "recipes/library/tiddlers/" + encodeURIComponent(title) + ".json »?

Improvement ideas:

* Get the last part of ‘title’ from the URL (hence not needing any configuration)
* Have a front-end for the configuration instead of that data tiddler (and perhaps put the data tiddler directly in the Control Panel while we wait)
* Have a « push-to-library » function (will need a server)
* Use the internal plugin-maker, if I can

---

Hi Tobias

> Interestingly, except Erwan who does rely on that for indexing plugins, I don't think I've read any demands so far that asked for this or that this or that macro be wrapped up and shipped as a plugin.

It’s pretty simple: it’s only worth using a plugin over a JSON bundle if you want (a) your tiddlers to appear as shadow tiddlers and (b) to be able to handle subsequent updates to the plugin. I think that the demand for plugins that can automatically upgrade is pretty strong.

> In the long term, I can see that the mechanism does perhaps provide better means to provide for any (semi-automated) upgrade procedure via some future tb5 plugin library against which to check for updates.

It’s not really “future”; the plugin library and plugin upgrade procedure is already built into the core.

> Back to simple "bundles" and the context of "let's (allow to) create the simplest plugin possible": One should be able to not specify a version, maybe even plugin-type, and all that jazz and still have a "bundle of tiddlers" created / imported.

But you already can! If you don’t want to have “all that jazz” then you can publish your tiddlers as a JSON bundle. But if you do want to have the ability to automatically upgrade then you need to use a plugin.

It really seems as though you are saying “plugins are too complicated, there needs to be a simpler alternative”, and yet there already is a simpler alternative available, in the shape of JSON bundles.

> Following your instructions here, I can see that the following won't do to create the simplest of "bundles”:

I’m not sure what you’re saying here. Are you saying that the following steps don’t work? Or that they are not simple enough?

```
title: bundle
type: application/json

{"tiddlers": {}}
```

> with

```
title: foo
tags bar

baz
```

> and then in the console:

> ``$tw.utils.repackPlugin("bundle",["foo"]);``

> There are a number of issues with this:
> 
> 1. if I have to declare a plugin-type, I'd rather want to use a plugin-type that indicates we're packaging a simple bundle, not a plugin
>   * in fact, any unrecognized plugin-type should possibly be interpreted as that

Please don’t try to to unilaterally change the vocabulary that we have already established. These things are called “plugins” and not “bundles”. Changing the name is a big deal that will affect a lot of the code, and shouldn’t just be done unilaterally in a mailing list post; it’s incredibly confusing.

I think you’re saying that you’d like the “plugin-type” field to default to “plugin”. I think you’re just not seeing that there are a different types of plugin, and we need to distinguish them because they have different semantics; for example, only one language or theme can be switched in at once.

> 2. I do not want to fiddle with any versioning at the very beginning

You don’t have to fiddle with the version at the beginning, but you won’t be able to use the upgrade mechanism effectively until you do.

> as it proves problematic for importing (the same version)

I don’t think that there is a problem; an incoming plugin with the same version is treated as newer, and is imported.

> so I need to repack my plugin

> but then the constituent tiddlers are gone

> so I need to find a way to start from a wiki with 

> "unpacked" plugin components

> too many things to consider

Again, it seems like you are confusing the current implementation of packing plugins in the browser (which was done in 30 minutes in response to a mailing list request) with the way that plugins are implemented.

> 3. repackPlugin should either
>  * a) never delete constituent tiddlers
>    * which means that you won't be able or even intend to use the "bundle" in the wiki you created it (in the browser)
>    * since we still have the constituent tiddlers as real tiddlers, which is fine anyways
in that sense, a user could be provided a button that creates a bundle on the fly whenever they want to grab it
>     * from whichever constituents they desire
>  * b) repack tiddlers that are already part of the bundle as shadows if they don't exist as real tiddlers
as, obviously, those initially bundled tiddlers are now gone
> * but then, how to remove one already packed?
mhhh, maybe via some option to repackPlugin

I’m sure the procedure can be improved.

>> For what it’s worth, I quite like the word “plugins”, closely followed by “bundle”. “Plugin” at least describes what one does with one of these things: they are designed to be plugged into wikis. The trouble with “bundle” is that we need a word that communicates the differences between a plugin (with it’s upgrade logic) and a bundle (without that logic). So right now I’d use “bundle” to describe a JSON file containing a bunch of tiddlers.

> Exactly, a bundle would be a json file containing a bunch of tiddlers unpacked as shadows. 

But then you are talking about a plugin, not a bundle. If you want the shadow plugin then you need a plugin; that is what they are for. The whole point of them is to give us shadow tiddlers. So trying to find some other way of implementing shadow tiddlers just seems a bit strange.

> There would possibly be a basic upgrade logic for "bundles" as well, namely: skip any version checks entirely. This could be achieved by setting an option flag for repackPlugin to not set any version, as we're not interested (yet) in doing so.

Again, it seems like you are trying to give JSON bundles the characteristics of plugins. It’s hard to see how we can do that without making them plugins.

If you import a JSON bundle with newer versions of the constituent tiddlers, then your existing ones will be overwritten. Isn’t that precisely the behaviour you’re asking for?

> Alternatively, a good alternative could be a YYYY-0MM-0DD-0hh-0mm-0ss version rather than the versioning scheme the name of which escapes me atm. But then, again, a set version comes with the troubles of not being able to import the same or lower version. And with a bundle I possibly don't want any of that. I just want to use that bundle as I just grabbed it.

If you look at semver.org you’ll see that your proposal doesn’t in fact conflict; semver allows for version numbers like 1.0.201511050347


>> The community is doing a good job exploring UIs for making plugins, and I’m confident that we will evolve better approaches.

> Surely, I'm very interested in this and I'm sure that trying to (allow users to) start from the most basic "bundle" users may indeed eventually find themselves wanting to leverage more features / aspects of full-blown-plugins, e.g. versioning. But I'd be all fine to have this a gradual process, rather than one requiring literacy of all the intricacies of versioning, plugin-types, dependences, etc…

I’m not sure what you mean by a “gradual” process? We’ve got JSON bundles, and we’ve got plugins; how could the transition be any more gradual?

Best wishes

Jeremy


> Best wishes,

> — tb